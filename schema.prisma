// 초기화
// npx prisma migrate init
// 
// 모델 -> DB 마이그레이션 작업 이름 설정 및 적용
// npx prisma migrate dev --name initial
// 
// 적용
// npx prisma migrate deploy
// 
// 클라이언트 생성
// npx prisma generate

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Role {
    code Int    @id
    name String

    users User[]
}

model Service {
    id   String @id
    name String

    users        User[]
    channels     Channel[]
    userChannels UserChannel[]
    messages     Message[]     @relation("UserService")
}

model ChannelType {
    code Int    @id
    name String

    channels Channel[]
}

model MessageType {
    code Int    @id
    name String

    messages Message[]
}

model User {
    serviceId           String?
    id                  String    @id
    password            String
    name                String
    roleCode            Int       @default(2)
    profileUserImageUrl String?
    createdAt           DateTime  @default(now())
    lastloggedInAt      DateTime?

    service Service? @relation(fields: [serviceId], references: [id])
    role    Role     @relation(fields: [roleCode], references: [code])

    messages     Message[]     @relation("UserMessages")
    userChannels UserChannel[]

    @@unique([serviceId, id], name: "ServiceUserId")
}

model Channel {
    serviceId String
    id        String
    name      String?
    typeCode  Int
    deleteYn  Boolean @default(false)

    service Service     @relation(fields: [serviceId], references: [id])
    type    ChannelType @relation(fields: [typeCode], references: [code])

    messages     Message[]     @relation("ChannelMessages")
    userChannels UserChannel[]

    @@id([serviceId, id], name: "ChannelPK")
}

model UserChannel {
    serviceId String
    userId    String
    channelId String
    name      String?
    joinAt    DateTime  @default(now())
    readAt    DateTime?

    service Service @relation(fields: [serviceId], references: [id])
    user    User    @relation(fields: [serviceId, userId], references: [serviceId, id])
    channel Channel @relation(fields: [serviceId, channelId], references: [serviceId, id])

    @@id([serviceId, userId, channelId], name: "UserChannelPK")
}

model Message {
    id        Int       @id @default(autoincrement())
    serviceId String
    channelId String
    userId    String
    parentId  Int?
    text      String?
    typeCode  Int
    filePath  String?
    fileName  String?
    fileSize  Int?
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    updatedYn Boolean   @default(false)
    deletedYn Boolean   @default(false)

    service  Service     @relation("UserService", fields: [serviceId], references: [id])
    channel  Channel     @relation("ChannelMessages", fields: [serviceId, channelId], references: [serviceId, id])
    user     User        @relation("UserMessages", fields: [userId], references: [id])
    parent   Message?    @relation("MessageComments", fields: [parentId], references: [id])
    children Message[]   @relation("MessageComments")
    type     MessageType @relation(fields: [typeCode], references: [code])
}
